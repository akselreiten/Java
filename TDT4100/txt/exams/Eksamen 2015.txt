
 2015

---- Oppgave 1 ----
a) 

1. String + String = String = Javaeksamen 
2. "Java" + "Eksamen" != "sant", boolean = false:
3. 1 / 2 = int / int = int; 
4. "0" + "123".charAt(5) = error, men i utgangspunktet har du String + Char som gir String. 
5. "0123".charAt(0) gir '0' - '0' = 0 = int

b) 

Collection<String>. 
Klassen er Collection, og du deklarerer hvilken klasse av atributter du kan ha inne i "Collection", som i dette tilfellet er av typen String. Dvs. at elementene inne i Collection-objektet skal være av typen String. 
På høyre side har du kommandoen "new" som sier at du skal initiere et nytt objekt av klassen Collection. Navnet til dette objektet er deklarert på venstre side; "strings". ArrayList er en underklasse av Collection. 

Altså: Typen på høyre side må være av den samme eller en subklasse av typen på venstresiden. 
Spesialiseringen må være den samme, som i dette tilfellet er String.

c) 

Et funksjonelt grensesnitt er et interface med kun én metode. Denne metoden er abstrakt, og resultatet av å utføre metoden skal alltid være det samme for like argumenter. 

Grensesnittet er ment å være den primære funksjonen til klassen som implementerer den. 

d) 

getGender() - returnerer 'F' eller 'M' eller '\0' [char]
getAge() - returnerer alter [int]


public Collection<Person> getMatchingPersons(Collection<Person> persons, Predicate<Person> predicate) {
	
	Collection<Person> result = new ArrayList<Person>();

	for (Person p : persons) {
		if (predicate.test(p)) {
			result.add(p); 
		}
	}

	// ALTERNATIV METODE

	for (Person p : persons) {
		if (p.getGender() == 'M' && p.getAge() >= 18) {
			result.add(p);
		}
	}
	
}


---- Oppgave 2 ----
a) 

public class Segment {
	
	private final double distance, duration; 

	public Segment (double distance, double duration) {
		if (distance > 0 && duration > 0) {
			this.distance = distance; 
			this.duration = duration; 
		}	
	}

	public double getDistance(){
		return distance; 
	}

	public double getDuration(){
		return duration; 
	}

	public double getSpeed(){
		return distance / duration;
	}

}

public class Path {
	
	private List<Segment> path = new ArrayList<Segment>(); 

	//SLIK HAR DE IKKE GJORT DET I LF
	public path(Segment... segments){
		for (Segment s : segments) {
			path.add(s);
		}
	} 

	//SLIK HAR DE GJORT DET I LF
	private List<Segment> path;
	public path(Segment segments){
		this.path = new ArrayList<Segment>(Arrays.asList(segments))
	}

	public void addSegment(Segment segment){
		path.add(segment);
	}

	public Segment getSegment(index){
		try {
			return path.get(index); 
		} catch (IllegalArgumentException e) {
		}
	}
}

c) 

Tegn objektdiagram: 
Segment 1: s = 20 // t = 1200
Segment 2: s = 80 // t = 3600
Segment 3: s = 10 // t = 550

Trenger tre objekter av klassen Segment kalt S1, S2 og S3.
Ett objekt av klassen path som tar inn S1, S2 og S3. 
Tegne en boks for klassen Segment. Tre underbokser kalt S1, S2 og S3 med paramterverdier som anvist over. 
Tegne en boks for klassen Path. Pil fra Segment til Path. Rett over pilen skriver jeg "path" som symboliserer List<Segment> path; 

d) 

public double getDuration(){
	double sum = 0;
	for (Segment seg : path) {
		sum += seg.getDuration(); 
	}

	return sum; 
}

public double getDistance(Segment fromSegment, Segment uptoSegment) {
	int startIndex, uptoIndex = 0; 
	double sum = 0; 

	if (!path.contains(fromSegment) || !path.contains(uptoSegment)){
		throw new IllegalArgumentException("Segments not a part of path."); 
	}

	if (fromSegment == null){
		startIndex = 0; 
	} else {
		startIndex = path.getIndex(fromSegment);  
	}

	if (uptoSegment == null){
		uptoIndex = path.size(); 
	} else {
		uptoIndex = path.getIndex(uptoSegment);  
	}

	for (int i = startIndex; i<uptoIndex; i++) {
		sum += path.get(i).getDistance(); 
	}

	return sum; 

}

public Segment getSegment(double distance, boolean next){
	double delta = distance;
	int j, inSegment= 0; 

	while (delta > 0) {
		delta -= path.get(j).getDistance();
		if (delta <= 0){
			inSegment = j; 
			break; 
		}
		j++; 
	} 

	if (!next) {
		return path.get(j); 
	} else {
		if (j == path.size()-1) {
			return null; 
		} 

		return path.get(j+1)
	}

	return null; 
}


e) 

public class Trip {
	
	private final Path pathExpected; 
	private Path pathReal; 

	public Trip(Path pathExpected){
		this.pathExpected = pathExpected; 
	}

	public void registerSegment(double distance, double duration){

		//Recalculating distance and duration
		distance = distance - pathReal.getDistance(null,null); 
		duration = duration - pathReal.getDuration(); 

		//Are distance values what we expected?
		if (pathExpected.size() <= pathReal.size(){
			throw new IllegalArgumentException("Already registered enough segments");
		}

		if (pathExpected.get(pathReal.size()+1) - distance != 0) {
			throw new IllegalArgumentException("Distance is not right.");
		}

		Segment newSeg = new Segment(distance,duration);
		pathReal.addSegment(newSeg);

	}

}

f) 

Denne koden gjør et par antakelser om Trip- og Path-klassene. 
- 

public double estimateTime(double distance, double duration) {
     double remainingTime = 0.0;
     for (Segment segment : this.getExpectedPath()) {
          distance -= segment.getDistance();
          // hvis vi har begynt å akkumulere
          if (remainingTime > 0.0) {
               // akkumuler
               remainingTime += segment.getDuration();
          } // hvis turen har kommet til dette segmentet
          else if (distance < 0) {
               // begynn å akkumulere
               remainingTime = segment.getSpeed() * (- distance);
          }
     }
     return remainingTime;
}



---- Oppgave 3 ----

a) 

Vi kan lage en abstrakt klasse som er basert på Trip, og gjør estimateTime abstract. Abstract classes cannot be instansiated, but can be subclassed. An abstract method is a method that is declared without an implementation (not "method(){}", but "method();")

public abstract class AbstractTrip {
	
	protected AbstractTrip(Path path) {
		this.path = path;
	}

	public abstract double estimateTime(double distance, double duration); 
}

public class Trip extends AbstractTrip {
	
	protected Trip(Path path) {
		super(path); 
	}

	public double estimateTime(double distance, double duration){
		...
	}

}

b) 

public interface TimeEstimator {
    double estimateTime(Path expectedPath, Path realPath, double distance, double duration);
}

Lager en ny klasse: DefaultTimeEstimator

public class DefaultTimeEstimator() implements TimeEstimator{
	
	double estimateTime(Path expectedPath, Path realPath, double distance, double duration){
		...
	}
}

public class Trip {
	....

	private TimeEstimator timeEstimator = new DefaultTimeEstimator();
	public void setTimeEstimator(TimeEstimator timeEstimator) {
		this.timeEstimator = timeEstimator; 
	}
	public double estimateTime(double distance, double duration){
		return timeEstimator.estimateTime(path, actualpath, distance, duration)
	}
}

Delegeringsteknikken er mer fleksibel enn arv, fordi du når som helst kan bytte ut TimeEstimator-objektet og dermed også endre oppførselen til estimateTime-metoden


---- Oppgave 4 ----
a) 

public class ArrivalNotifier {

	String phone;
	double notifyTime;  

	public ArrivalNotifier(String phone, double notifyTime){
		this.phone = phone;
		this.notifyTime = notifyTime;
	}

	public String getPhone(){
		return this.phone; 
	}

	public double getNotifyTime(){
		reuturn this.getNotifyTime; 
	}

}

Med denne klassen kan jeg lage en liste; 
List<ArrivalNotifier> people = new ArrayList<ArrivalNotifier>; 
Og for hver person som skal legges til kan jeg lage et nytt objekt og legge det til i listen. Henter ut tlf.nr og notifyTime med get-metoder. 


b) 

Her må altså ArrivalNotifier få beskjed om endringer i Trip, som er tidsestimatet til de er framme. 
Dette kalles observatør-observert-teknikken. I Trip-klassen burde du ha mulighet til å legge til og fjerne "følgere" som skal ha varsel. I Trip burde det også oppdateres data om tid som da "sendes videre" ved å oppdatere data i listen over alle "følgere". 

Tiden kan håndteres ved å anta at det finnes en "Clock"-klasse, som kan si fra hvert minutt til et sett med lyttere (en liste). Man kan f.eks. ha grensesnittet ClockListener med minutesPassed()-metoden, og metodene add- og removeClockListener. 

Trip må gjøres observerbar: 
1) en må ha lesemetoder for alle relevante data. 
- Det må innføres lesemetoder for å lese segments (som path)
2) en må kunne registrere lyttere (som implementerer et lyttergrensesnitt (f.eks. TripChangedListener)). Disse må få beskjed når objektet endres, feks. vha tripChanged. 
- Man må ha en liste over TripChangeListeners og add- og remove-metoder. tripChanged-metoden må kalles fra registerSegment-metoden, etter at et nytt segment er lagt til. Da må tiden oppdatere seg! 