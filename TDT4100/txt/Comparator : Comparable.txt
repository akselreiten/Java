Comparator / Comparable

public class App {
	
	public static void main(String[] args) {
		List<String> animals = new ArrayList<String>(); 
		animals.add("Cat");
		animals.add("Elephant");
		animals.add("Snake");
		animals.add("Lion");
		animals.add("Mongoose");

		Collections.sort(animals);
		for (String animal : animals){
			System.out.println(animal);
		}
	}
}

/Use Collections.sort(listName) to sort the list alphabetically

		List<Integer> numbers = new ArrayList<Integer>(); 
		numbers.add(3);
		numbers.add(199);
		numbers.add(12);
		numbers.add(35);
		numbers.add(87);
		
		Collections.sort(numbers);
		for (int num : numbers){
			System.out.println(num);
		}

/Use Collextions.sort(listName) to sort the list from low to high. 
This sorting is called sorting in natural order. To sort something in other than natural order, we can use Comparator.

Then we need to make a class that implements comparator. 

public class StringLengthComparator implements Comparator<String>{
	
	@Override
	public int compare(String s1, String s2){

		//if (s1 == s2), returns zero. 
		//if (s1 > s2), returns 1
		//if (s1 < s2), returns -1. 

	 	//It will naturally sort from low to high, so if s1 > s2 then s2 will be sorted before s1. 

		if (s1.length() > s2.length()){
			return 1;
		}
		if (s1.length() < s2.length()){
			return 0;
		}
		return 0;
	}
}


Now, to use this class in our App-class to sort by Stringlength: 

		Collections.sort(animals, new StringLengthComparator());
		for (String animal : animals){
			System.out.println(animal);
		}

Trenger heller ikke å lage en helt ny klasse! Du kan bare: 

List<Integer> numbers = new ArrayList<Integer>(); 
Collections.sort(numbers, new Comparator<Integer>{
	
	public int compare(Integer arg1, Integer arg2){
		return -arg1.compareTo(arg2);
	}

})


Now we've sorted both numbers and strings, but we haven't yet sorted objects! 

Say we have a person-class. they av names and ids. Klassen har også en toString(){return name;}
For å sortere denne listen må vi definere en comparator, fordi at comparator vet ikke by default hvordan den skal sortere person-objekter naturlig.

List<Person> people = new ArrayList<Person>(); 
Collections.sort(people, new Comparator<Person>(){
	public int compare(Person p1, Person p2){
		return p1.getName().compareTo(p2.getName()); 
	}
})

for (Person p : people){
	System.out.println(person)
}





-------------COMPARABLE----------

List<Person> list = new ArrayList<Person>(); 
SortedSet<Person> set = new TreeSet<Person>(); //TreeSet automatically sorts list in natural order. 

Now, for Collections.sort(listName) to work, a natural order must be defined for the objects inside the list.
They are not for the person-objects. Therefore, we make the compareTo()-method in the person-class by implementing Comparable. 

public class Person implements Comparable<Person>{
	
	....

	public int compareTo(Person other){
		return this.getName().compareTo(other.getName());
		//returns -1 if this is less than other. THis means that this should be sorted BEFORE other. 
		ELLER

		if (this.getName() > other.getName(){
			return 1;
		} else if (this.getName() < other.getName()){
			return -1; 
		}
		return 0; 
	}

}

--------

Oppsummering: 

Objekter har ikke en "natural order", så Collections.sort vet ikke hvordan den skal sortere dem. 
Derfor må dette lages. 

Dette kan gjøres ved å implementere Comparable i klassen og lage metoden public int compareTo(Object other). 
Da kan du bruke Collections.sort(list) for å sortere den som definert i compareTo. 

Eller så kan du lage en comparator som basically gjør akkurat det samme. Litt mer stress. 
Du kan lage en egen klasse som kalles ReverseAlphabetComparator implements Comparator<Class>{...} og lage metoden public int compare(Object o1, Object o2); 
Også når du skal sortere, kalle på Collections.sort(listName, new ReverseAlphabetComparator()); 

Egentlig ganske greit med Comparator: 
Implementer Comparator<Class>;


